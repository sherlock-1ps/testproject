@mixin button-color($border-color, $bg-color, $text-color) {
  background-color: $bg-color !important;
  border-color: $border-color !important;

  @if $text-color {
    color: $text-color !important;
  }
}

@mixin button-variant($border-color,
  $bg-color,
  $text-color,
  $active-border-color,
  $active-bg-color,
  $active-text-color: $text-color,
  $ring-color: transparent) {
  @include button-color($border-color, $bg-color, $text-color);

  &:not(:disabled) {

    &:active,
    &.active {
      @include button-color($active-border-color, $active-bg-color, $active-text-color);
    }

    // @media (hover: hover) {
    &:hover {
      @include button-color($active-border-color, $active-bg-color, $active-text-color);

      box-shadow: 0px 0px 0px 2px $ring-color;
    }

    // }
  }
}

.ant-btn {
  @apply inline-flex items-center justify-center #{!important};

  /* Type Primary */
  &-primary#{&} {
    &:not(:disabled) {
      &.button-primary {
        @include button-variant(theme('colors.primary'),
          theme('colors.primary'),
          theme('colors.white'),
          theme('colors.primary-hover'),
          theme('colors.primary-hover'),
          theme('colors.white'),
          theme('colors.primary-hover / 40%'));
      }

      &.button-secondary {
        @include button-variant(theme('colors.secondary'),
          theme('colors.secondary'),
          theme('colors.white'),
          theme('colors.secondary-hover'),
          theme('colors.secondary-hover'),
          theme('colors.white'),
          theme('colors.secondary-hover / 40%'));
      }

      &.button-warning {
        @include button-variant(theme('colors.warning'),
          theme('colors.warning'),
          theme('colors.black'),
          theme('colors.warning-hover'),
          theme('colors.warning-hover'),
          theme('colors.black'),
          theme('colors.warning-hover / 40%'));
      }

      &.button-success {
        @include button-variant(theme('colors.success'),
          theme('colors.success'),
          theme('colors.white'),
          theme('colors.success-hover'),
          theme('colors.success-hover'),
          theme('colors.white'),
          theme('colors.success-hover / 40%'));
      }

      &.button-error {
        @include button-variant(theme('colors.error'),
          theme('colors.error'),
          theme('colors.white'),
          theme('colors.error-hover'),
          theme('colors.error-hover'),
          theme('colors.white'),
          theme('colors.error-hover / 40%'));
      }

      &.button-info {
        @include button-variant(theme('colors.info'),
          theme('colors.info'),
          theme('colors.white'),
          theme('colors.info-hover'),
          theme('colors.info-hover'),
          theme('colors.white'),
          theme('colors.info-hover / 40%'));
      }

      &.button-pin {
        @include button-variant(theme('colors.background / 40%'),
          theme('colors.background / 40%'),
          theme('colors.white'),
          theme('colors.background / 90%'),
          theme('colors.background / 90%'),
          theme('colors.white'),
          theme('colors.background / 20%'));
      }
    }
  }

  /* Type Default & Type Dashed */
  &-default#{&},
  &-dashed#{&} {
    &:not(:disabled) {
      &.button-primary {
        @include button-variant(theme('colors.primary'),
          theme('colors.primary / 0%'),
          theme('colors.primary'),
          theme('colors.primary'),
          theme('colors.primary / 0%'),
          theme('colors.primary'),
          theme('colors.primary / 40%'));
      }

      &.button-secondary {
        @include button-variant(theme('colors.secondary'),
          theme('colors.secondary / 0%'),
          theme('colors.secondary'),
          theme('colors.secondary'),
          theme('colors.secondary / 0%'),
          theme('colors.secondary'),
          theme('colors.secondary / 40%'));
      }

      &.button-warning {
        @include button-variant(theme('colors.warning'),
          theme('colors.warning / 0%'),
          theme('colors.warning'),
          theme('colors.warning'),
          theme('colors.warning / 0%'),
          theme('colors.warning'),
          theme('colors.warning / 40%'));
      }

      &.button-success {
        @include button-variant(theme('colors.success'),
          theme('colors.success / 0%'),
          theme('colors.success'),
          theme('colors.success'),
          theme('colors.success / 0%'),
          theme('colors.success'),
          theme('colors.success / 40%'));
      }

      &.button-error {
        @include button-variant(theme('colors.error'),
          theme('colors.error / 0%'),
          theme('colors.error'),
          theme('colors.error'),
          theme('colors.error / 0%'),
          theme('colors.error'),
          theme('colors.error / 40%'));
      }

      &.button-info {
        @include button-variant(theme('colors.info'),
          theme('colors.info / 0%'),
          theme('colors.info'),
          theme('colors.info'),
          theme('colors.info / 0%'),
          theme('colors.info'),
          theme('colors.info / 40%'));
      }
    }
  }

  /* Type Text */
  &-text#{&} {
    &:not(:disabled) {
      &.button-primary {
        @include button-variant(theme('colors.primary / 0%'),
          theme('colors.primary / 0%'),
          theme('colors.primary'),
          theme('colors.primary / 0%'),
          theme('colors.primary / 10%'),
          theme('colors.primary'),
          theme('colors.primary / 0%'));
      }

      &.button-secondary {
        @include button-variant(theme('colors.secondary / 0%'),
          theme('colors.secondary / 0%'),
          theme('colors.secondary'),
          theme('colors.secondary / 0%'),
          theme('colors.secondary / 10%'),
          theme('colors.secondary'),
          theme('colors.secondary / 0%'));
      }

      &.button-warning {
        @include button-variant(theme('colors.warning / 0%'),
          theme('colors.warning / 0%'),
          theme('colors.warning'),
          theme('colors.warning / 0%'),
          theme('colors.warning / 10%'),
          theme('colors.warning'),
          theme('colors.warning / 0%'));
      }

      &.button-success {
        @include button-variant(theme('colors.success / 0%'),
          theme('colors.success / 0%'),
          theme('colors.success'),
          theme('colors.success / 0%'),
          theme('colors.success / 10%'),
          theme('colors.success'),
          theme('colors.success / 0%'));
      }

      &.button-error {
        @include button-variant(theme('colors.error / 0%'),
          theme('colors.error / 0%'),
          theme('colors.error'),
          theme('colors.error / 0%'),
          theme('colors.error / 10%'),
          theme('colors.error'),
          theme('colors.error / 0%'));
      }

      &.button-info {
        @include button-variant(theme('colors.info / 0%'),
          theme('colors.info / 0%'),
          theme('colors.info'),
          theme('colors.info / 0%'),
          theme('colors.info / 10%'),
          theme('colors.info'),
          theme('colors.info / 0%'));
      }
    }
  }

  /* Type Link */
  &-link#{&} {
    &:not(:disabled) {
      &.button-primary {
        @include button-variant(theme('colors.primary / 0%'),
          theme('colors.primary / 0%'),
          theme('colors.primary'),
          theme('colors.primary / 0%'),
          theme('colors.primary / 0%'),
          theme('colors.primary-hover'),
          theme('colors.primary / 0%'));
      }

      &.button-secondary {
        @include button-variant(theme('colors.secondary / 0%'),
          theme('colors.secondary / 0%'),
          theme('colors.secondary'),
          theme('colors.secondary / 0%'),
          theme('colors.secondary / 0%'),
          theme('colors.secondary-hover'),
          theme('colors.secondary / 0%'));
      }

      &.button-warning {
        @include button-variant(theme('colors.warning / 0%'),
          theme('colors.warning / 0%'),
          theme('colors.warning'),
          theme('colors.warning / 0%'),
          theme('colors.warning / 0%'),
          theme('colors.warning-hover'),
          theme('colors.warning / 0%'));
      }

      &.button-success {
        @include button-variant(theme('colors.success / 0%'),
          theme('colors.success / 0%'),
          theme('colors.success'),
          theme('colors.success / 0%'),
          theme('colors.success / 0%'),
          theme('colors.success-hover'),
          theme('colors.success / 0%'));
      }

      &.button-error {
        @include button-variant(theme('colors.error / 0%'),
          theme('colors.error / 0%'),
          theme('colors.error'),
          theme('colors.error / 0%'),
          theme('colors.error / 0%'),
          theme('colors.error-hover'),
          theme('colors.error / 0%'));
      }

      &.button-info {
        @include button-variant(theme('colors.info / 0%'),
          theme('colors.info / 0%'),
          theme('colors.info'),
          theme('colors.info / 0%'),
          theme('colors.info / 0%'),
          theme('colors.info-hover'),
          theme('colors.info / 0%'));
      }
    }
  }
}

// Custom buttons for hook confirm modal
.ant-modal-confirm-btns {
  &>.ant-btn-primary {
    @include button-variant(theme('colors.primary'),
      theme('colors.primary'),
      theme('colors.white'),
      theme('colors.primary-hover'),
      theme('colors.primary-hover'),
      theme('colors.white'),
      theme('colors.primary-hover / 40%'));
  }

  &>.ant-btn-default {
    @include button-variant(theme('colors.secondary'),
      theme('colors.secondary'),
      theme('colors.black'),
      theme('colors.secondary-hover'),
      theme('colors.secondary-hover'),
      theme('colors.black'),
      theme('colors.secondary-hover / 40%'));
  }
}